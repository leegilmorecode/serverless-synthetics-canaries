const synthetics = require('Synthetics');
import * as http from 'http';
const syntheticsConfiguration = synthetics.getConfiguration();

const apiCanaryBlueprint = async function (): Promise<void> {
  syntheticsConfiguration.setConfig({
    restrictedHeaders: [],
    restrictedUrlParameters: [],
  });

  // Handle validation for positive scenario
  const validateSuccessful = async function (res: any): Promise<void> {
    return new Promise<void>((resolve) => {
      if (res.statusCode < 200 || res.statusCode > 299) {
        throw `${res.statusCode}  ${res.statusMessage}`;
      }

      let responseBody = '';
      res.on('data', (d: string) => {
        responseBody += d;
      });

      res.on('end', () => {
        resolve();
      });
    });
  };

  let requestOptionsStep1: http.RequestOptions = {
    hostname: process.env.APP_API_HOST,
    method: 'GET',
    path: `/${process.env.STAGE}/${process.env.APP_API_URL}`,
    port: '443',
    protocol: process.env.APP_API_PROTOCOL,
    headers: {},
  };

  if (requestOptionsStep1['headers']) {
    requestOptionsStep1['headers']['User-Agent'] = [
      synthetics.getCanaryUserAgentString(),
      requestOptionsStep1['headers']['User-Agent'],
    ].join(' ');
  }

  let stepConfig1 = {
    includeRequestHeaders: true,
    includeResponseHeaders: true,
    includeRequestBody: true,
    includeResponseBody: true,
    continueOnHttpStepFailure: true,
  };

  await synthetics.executeHttpStep(
    'Verify /actors',
    requestOptionsStep1,
    validateSuccessful,
    stepConfig1,
  );

  let requestOptionsStep2: http.RequestOptions = {
    hostname: process.env.APP_API_HOST,
    method: 'GET',
    path: `/${process.env.STAGE}/${process.env.APP_API_URL}/1`,
    port: '443',
    protocol: process.env.APP_API_PROTOCOL,
    headers: {},
  };

  if (requestOptionsStep2['headers']) {
    requestOptionsStep2['headers']['User-Agent'] = [
      synthetics.getCanaryUserAgentString(),
      requestOptionsStep2['headers']['User-Agent'],
    ].join(' ');
  }

  let stepConfig2 = {
    includeRequestHeaders: true,
    includeResponseHeaders: true,
    includeRequestBody: true,
    includeResponseBody: true,
    continueOnHttpStepFailure: true,
  };

  await synthetics.executeHttpStep(
    'Verify /actors/1',
    requestOptionsStep2,
    validateSuccessful,
    stepConfig2,
  );
};

exports.handler = async () => {
  return await apiCanaryBlueprint();
};
